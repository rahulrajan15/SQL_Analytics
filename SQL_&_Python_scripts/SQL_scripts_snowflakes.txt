
----------------------------********************************************----------------------------************************************----------------------------
----------- Snowflake SQL ----------------------

Dashboard link - https://app.snowflake.com/nvpxgsu/xzb83191/#/otodom_analytics-dFgUG8KI4

snowsql -a nvpxgsu-xzb831** -u kent**

show databases

use otodom_database

use WAREHOUSE OTODOM_WH;

--1) create a database and table:

CREATE or replace TABLE OTODOM_DATA_dump_short
(
    json_data  text
);

--2) Create a database and warehouse in snowflake

CREATE OR REPLACE database otodom_db;

CREATE OR REPLACE warehouse otodom_wh;

--3) Create a stage to load the data from csv or json format:

create or replace file format csv_ffcon
type = 'csv'
field_delimiter = ','
field_optionally_enclosed_by='"';


---- or --------

CREATE OR REPLACE FILE FORMAT csv_ff
type = csv
field_delimiter = ','
field_optionally_enclosed_by='"';


--4) create a stage in snowsql:
create or replace stage otodom_stage
file_format = json_format;


==>Note: STRIP_OUTER_ARRAY = TRUE directs the COPY command to exclude the root brackets ([]) when loading data to the table.

-- Create file format for csv or json file according to your data.
create or replace file format json_format
type = 'JSON'
strip_outer_array=TRUE;


-------------- Create a table with stage, file format, put cmd and load the csv file into the table:

select * from @otodom_stage;

CREATE TABLE otodom_data_dump_unclean
(
    json_data variant
);

CREATE OR REPLACE FILE FORMAT csv_ff
type = csv
field_delimiter = ','
field_optionally_enclosed_by='"';

CREATE OR REPLACE STAGE stage_csv_ff
file_format=csv_ff;


-- Load csv file data to internal stage. Please note, below PUT command can only be run from SNOWSQL (Command line prompt of Snowflake)

-- PUT file:///C:/Users/rahul_jg3thx5/Data_projects/SQL_DA_projects/otodom_pl_12.csv
-- @stage_csv_ff;


-- PUT file:///C:/Users/rahul_jg3thx5/Data_projects/SQL_DA_projects/otodom_pl_122.csv
-- @stage_csv_ff;


-- PUT file:///C:/Users/rahul_jg3thx5/Data_projects/SQL_DA_projects/otodom_pl_123.csv
-- @stage_csv_ff;

COPY INTO otodom_data_dump_unclean
from @stage_csv_ff;

select count(1) from otodom_data_dump_unclean; -- 62816 unstructured data in a table
select * from otodom_data_dump_unclean limit 20; -- unstructured data in a table

SELECT PARSE_JSON(json_data):price 
FROM otodom_data_dump_unclean limit 10; -- Should return just the Price field


-- Flatten the data and load to a new table:


CREATE OR REPLACE table otodom_data_short_flatten
as
select row_number() over(order by title) as rn
, x.*
from (
select replace(parse_json(json_data):advertiser_type,'"')::string as advertiser_type
, replace(parse_json(json_data):balcony_garden_terrace,'"')::string as balcony_garden_terrace
, regexp_replace(replace(parse_json(json_data):description,'"'), '<[^>]+>')::string as description
, replace(parse_json(json_data):heating,'"')::string as heating
, replace(parse_json(json_data):is_for_sale,'"')::string as is_for_sale
, replace(parse_json(json_data):lighting,'"')::string as lighting
, replace(parse_json(json_data):location,'"')::string as location
, replace(parse_json(json_data):price,'"')::string as price
, replace(parse_json(json_data):remote_support,'"')::string as remote_support
, replace(parse_json(json_data):rent_sale,'"')::string as rent_sale
, replace(parse_json(json_data):surface,'"')::string as surface
, replace(parse_json(json_data):timestamp,'"')::date as timestamp
, replace(parse_json(json_data):title,'"')::string as title
, replace(parse_json(json_data):url,'"')::string as url
, replace(parse_json(json_data):form_of_property,'"')::string as form_of_property
, replace(parse_json(json_data):no_of_rooms,'"')::string as no_of_rooms
, replace(parse_json(json_data):parking_space,'"')::string as parking_space
from otodom_data_dump_unclean 
) x;

select count(1) from otodom_data_short_flatten; -- 62816 structured data in a table
select * from otodom_data_short_flatten limit 20; -- structured data in a table

----------------------------********************************************----------------------------************************************----------------------------

---------------------------- This step is done in cloud ------------------------------------------------------

-- OTODOM_DATA_FLATTEN table will have data taken from Otodom but couple of transformation will be required.

==> Before executing Python scripts, create a virtual environment and install all the required packages as mentioned in file "Python_Prerequisites_Otodom_Analysis.txt".
==> Before executing the below D2 step, you will need to go to google developer console (have an account) and do the following:
    ==> Create a project and select it as current project.
    ==> Go to Librabry and search for "Google Drive API" and enable it.
    ==> Go to Librabry and search for "Google Sheets API" and enable it.
    ==> Go to credentials and create a credential. Choose service account.
    ==> Once service account credential is created, click on it and go to keys and create a new key in JSON format.
    ==> Download the JSON file (generated key). This file is required for python to connect to your google drive to create and work with google sheets.


Step 1: Transform location coordinates (Latitude and Longitude) into proper address having city, suburb, country etc. 
This can be achieved in Python using "geopy.geocoders". 

So execute the python script "fetch_address_Otodom_Analysis.py". This will take location data from OTODOM_DATA_FLATTEN table and return the proper address for each location and load it into a new table OTODOM_DATA_FLATTEN_ADDRESS.

If you do not want to use Python, then a csv file containing address data is given, please upload csv file data to a new table OTODOM_DATA_FLATTEN_ADDRESS_FULL.


Step 2: Translate Title from Polish to English language.
This can also be achieved using the same python program as used above and by calling the GoogleTranslator API from Python. However for over 200k records this will fail since 200k is the max limit per day/month.

Alternatively, we can achieve this in Google sheets using the GoogleTranslator API. In Google sheets, if we split the records into multiple files of 10k records each, the API seems to be working.

Please execute the Python script "translate_text_gsheet_Otodom_Analysis.py". This will create multiple (32 files for given full dataset) in the shared google account.
Once the files are created, please wait for 30-60 mins for all the translation to happen within the google sheets.

Then run the next Python script "load_data_gsheet_to_SF_Otodom_Analysis.py" to load the data from google sheets back to Snowflake. This will create a new table in snowflake by name "OTODOM_DATA_FLATTEN_TRANSLATE" which will have the new column "TITLE_ENG" (translated title in English)

------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------********************************************----------------------------************************************----------------------------

------- Load the csv file with the some data, address, location extracted

create table otodom_data_flatten_address
(
    RN int,
    location text,
    address text
);


create or replace file format csv_format_add
type = csv
field_delimiter=','
field_optionally_enclosed_by='"';

create or replace stage address_csv_stage
file_format=csv_format_add;

-- Put command: PUT file:///C:/Users/rahul_jg3thx5/Data_projects/SQL_DA_projects/otodom_address_data.csv
-- @address_csv_stage;

copy into otodom_data_flatten_address
from @address_csv_stage;

-- verifying the data is loaded correctly or not:
select count(1) from otodom_data_flatten_address; --62802 structured data in address table
select * from otodom_data_flatten_address limit 20; --structured data in address table



------- Load the csv file with the some data, convert title column from polish into english ------

create table otodom_data_flatten_title
(
    RN int,
    title_pl text,
    title_en text
);

create or replace file format csv_format_title
type = csv
field_delimiter=','
field_optionally_enclosed_by='"';

create or replace stage title_csv_stage
file_format=csv_format_title;

-- Put command: PUT file:///C:/Users/rahul_jg3thx5/Data_projects/SQL_DA_projects/otodom_translate_data.csv
-- @title_csv_stage;

copy into otodom_data_flatten_title
from @title_csv_stage;

-- verifying the data is loaded correctly or not:
select count(1) from otodom_data_flatten_title; --62802 structured data in title table
select * from otodom_data_flatten_title limit 20; --structured data in title table


--- Since we have flatten data we have from three tables with common cloumn "RN", so we can perform the transformation opertaions:
select * from otodom_data_short_flatten limit 20; -- structured flatten data in a table
select * from otodom_data_flatten_address limit 20; --structured flatten data in address table
select * from otodom_data_flatten_title limit 20; --structured data in title table


-- Now join the 3 tables and do the transformation:


create or replace table otodom_data_transformed
as
with cte as
   (select ot.*
  , case when price like 'PLN%' then try_to_number(replace(price,'PLN ',''),'999,999,999.99')
       when price like '€%' then try_to_number(replace(price,'€',''),'999,999,999.99') * 4.43
    end as price_new
  , try_to_double(replace(replace(replace(replace(surface,'m²',''),'m²',''),' ',''),',','.'),'9999.99') as surface_new
  , replace(parse_json(addr.address):suburb,'"','') as suburb
  , replace(parse_json(addr.address):city,'"','') as city
  , replace(parse_json(addr.address):country,'"','') as country
  ,trans.title_en as title_eng
  from otodom_data_short_flatten ot
  left join otodom_data_flatten_address addr on ot.rn=addr.rn
  left join otodom_data_flatten_title trans on ot.rn=trans.rn)
select * 
, case when lower(title_eng) like '%commercial%' or lower(title_eng) like '%office%' or lower(title_eng) like '%shop%' then 'non_apartment'
       when is_for_sale = 'false' and surface_new <=330 and price_new <=55000 then 'apartment'
       when is_for_sale = 'false' then 'non apartment'
       when is_for_sale = 'true' and surface_new <=600 and price_new <=20000000 then 'apartment'
       when is_for_sale = 'true' then 'non apartment'
  end as apartment_flag
from cte;
drop table otodom_data_transformed;


-- correct query --------
CREATE OR REPLACE TABLE OTODOM_DATA_TRANSFORMED1
as
with cte as 
    (select ot.*
    , case when price like 'PLN%' then try_to_number(replace(price,'PLN ',''),'999,999,999.99')
           when price like '€%' then try_to_number(replace(price,'€',''),'999,999,999.99') * 4.43
      end as price_new
    , try_to_double(replace(replace(replace(replace(surface,'m²',''),'м²',''),' ',''),',','.'),'9999.99') as surface_new
    , replace(parse_json(addr.address):suburb,'"', '') as suburb
    , replace(parse_json(addr.address):city,'"', '') as city
    , replace(parse_json(addr.address):country,'"', '') as country
    , trans.title_en as title_eng
    from otodom_data_short_flatten ot 
    left join otodom_data_flatten_address addr on ot.rn=addr.rn 
    left join otodom_data_flatten_title trans on ot.rn=trans.rn)
select *
, case when lower(title_eng) like '%commercial%' or lower(title_eng) like '%office%' or lower(title_eng) like '%shop%' then 'non apartment'
       when is_for_sale = 'false' and surface_new <=330 and price_new <=55000 then 'apartment'
       when is_for_sale = 'false' then 'non apartment'
       when is_for_sale = 'true'  and surface_new <=600 and price_new <=20000000 then 'apartment'
       when is_for_sale = 'true'  then 'non apartment'
  end as apartment_flag
from cte;


--verifying data in the table:
select count(1) from otodom_data_transformed; --structured transformed data in table, 62816 
select * from otodom_data_transformed limit 40000; --structured transformed data in table


----- some of the case studies from the data to get the answers
-- case 1: What is the average rental price of 1 room, 2 room apartments in some of the major cities in Poland for new people who just try to get settled in poland? Arrange the result such that average rent for each type fo room is shown in seperate column.

select city 
, round(avg_rent_1R,2) as avg_rent_1R
, round(avg_rent_2R,2) as avg_rent_2R
from (
select city,no_of_rooms,price_new
from otodom_data_transformed
where city in ('Warszawa', 'Wrocław', 'Kraków', 'Gdańsk', 'Katowice', 'Łódź')
and apartment_flag = 'apartment'
and is_for_sale='false'
and no_of_rooms in (1,2)) x
pivot
(
avg(price_new)
for no_of_rooms in ('1','2')
)
as p(city,avg_rent_1R, avg_rent_2R)
order by city desc;


-- Case 2: What size of an apartment and in which city can I expect with a monthly rent of 2500 to 3500 PLN(INR 52025 - 72835) in different major cities as new person when I move into poland?

select city, avg(surface_new) avg_area, price_new
from otodom_data_transformed
where city in ('Warszawa', 'Wrocław', 'Kraków', 'Gdańsk', 'Katowice', 'Łódź')
and apartment_flag = 'apartment'
and is_for_sale = 'false'
and price_new between 2500 and 3500
group by city, price_new
order by avg_area;



-- Case 3: What are the most expensive apartment private places in major cities of Poland that is for rent? Display the ad title in english along with city, suburb, cost, size.

select city, max(price_new) max_price
from otodom_data_transformed
where city in ('Warszawa', 'Wrocław', 'Kraków', 'Gdańsk', 'Katowice', 'Łódź')
and apartment_flag='apartment'
and advertiser_type='private'
group by city;


-- Case 4: What is the percentage of private & business ads on otodom?
with all_ads as
(select count(1) tot_ads from otodom_data_transformed),
ads_type as
(select advertiser_type
, sum(case when advertiser_type='business' then 1 end) as business_ads
, sum(case when advertiser_type='private' then 1 end) as private_ads
from otodom_data_transformed
group by advertiser_type)
select concat(round((max(business_ads) * 100)/max(tot_ads),2),'%') as business_ads_perc
, concat(round((max(private_ads) * 100)/max(tot_ads),2),'%') as private_ads_perc
from ads_type ty
cross join all_ads al;


-- Case 5: Which are the top 5 most luxurious neighborhoods in Warsaw? Luxurious neighborhoods can be defined as suburbs which has the most no of of apartments costing over 2M in cost.


select suburb, luxurious_apartments
from (
select suburb, count(1) luxurious_apartments
, rank() over(order by luxurious_apartments desc ) as rn
from otodom_data_transformed
where city ='Warszawa'
and apartment_flag = 'apartment'
and is_for_sale = 'true'
and price_new > 2000000
and suburb is not null
group by suburb) x
where x.rn <= 5
limit 20000;